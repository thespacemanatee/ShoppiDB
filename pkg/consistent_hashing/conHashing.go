package conHashing

import (
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"math/big"
	"strconv"
)
var hashRange = new(big.Int).Exp(big.NewInt(2), big.NewInt(128), nil)

type Node struct {
	ID string
	IsSeed bool

	NodeRingPositions []int
	Ring *Ring
}

type Ring struct {
    MaxID int
	NodesMap map[string][]int
}

/**
* Returns a new node
*	if is a seed node, create a new ring
*
* @param nodeId The id for the new node
* @param seedNodes The array containing id of seed nodes
*
* @return a new node
*/
func NewNode(nodeId string, seedNodes []string) Node {
	var isSeed = false
	for _, s := range seedNodes {
		if nodeId == s {
			isSeed = true
		}
	}
	if isSeed {
		var ring = NewRing()
		ring.NodesMap[nodeId] = []int{1}
		return Node {
			ID: nodeId,
			IsSeed: isSeed,
			Ring: ring,
		}
	} else {
		return Node {
			ID: nodeId,
			IsSeed: false,
		}
	}
}

/**
* Update the position of its virtual nodes assigned
*
* @param node The node to update
* @param numNodes The total number of nodes
*
*/
func UpdateNode(node Node, numNodes string) {
	id, _ := strconv.Atoi(node.ID)
	totalNodes, _ := strconv.Atoi(numNodes)
	var nodeRingPositions []int
	for i := id; i <= totalNodes*totalNodes; i += totalNodes {
		nodeRingPositions = append(nodeRingPositions, i)
	}
	node.NodeRingPositions = nodeRingPositions
	fmt.Println(node.NodeRingPositions)
}

/**
* Update the position of its virtual nodes assigned to seed node
*
* @param node The node to update
* @param numNodes The total number of nodes
*
*/
func UpdateSeedNode(node Node, senderNodeId string) {
	node.Ring.MaxID += 1
	var nodeRingPositions []int
	id, _ := strconv.Atoi(node.ID)
	for i := id; i < node.Ring.MaxID*node.Ring.MaxID; i += node.Ring.MaxID {
		nodeRingPositions = append(nodeRingPositions, i)
	}
	fmt.Println(nodeRingPositions)
	node.Ring.NodesMap[senderNodeId] = nodeRingPositions
}

func NewRing() *Ring {
    nodesMap := make(map[string][]int)
	return &Ring{MaxID:1, NodesMap: nodesMap}
}


/**
* Returns the position indicated by the hash
* Eg. return value = 0.8
* position = 0.8 * Total num of nodes in ring
* 
* @param text The text to hash
* 
* @return the float generated by the hash
*/
func GetMD5Hash(text string) *big.Float {
	bi := big.NewInt(0)
	hasher := md5.New()
	hasher.Write([]byte(text))
	hexstr := hex.EncodeToString(hasher.Sum(nil))
	bi.SetString(hexstr, 16)
	// fmt.Println("bi:", bi)
	// var hashInt = bi.Int64()
	// fmt.Println("hash is:", bi)
	// fmt.Println("hashRange: ", hashRange)
	// hash := new(big.Int).Mod(bi, hashRange)
	hashFloat := new(big.Float).SetInt(bi)
	hashRangeFloat := new(big.Float).SetInt(hashRange)
	hash := new(big.Float).Quo(hashFloat,hashRangeFloat)
	return hash
	// byteArray := md5.Sum([]byte(text))
	// var output int
	// for _, num := range byteArray {
	// 	output += int(num)
	// }
	// return output % 360
}
