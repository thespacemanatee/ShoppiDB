package main

import (
	"ShoppiDB/pkg/consistent_hashing"
	"fmt"
	"log"
	"net"
	"os"
	"strconv"
	"strings"
	"time"
)

func main() {
	id := os.Getenv("NODE_ID")
	seedNodes := os.Getenv("SEEDNODES")
	node := conHashing.NewNode(id, strings.Split(seedNodes, ","))

	// wait for messages
	ln, err := net.Listen("tcp", ":8080")
	if err != nil {
		log.Fatal("server, Listen", err)
	}
	go listenMessage(ln, node)

	// send message
	for {
		time.Sleep(time.Second * 10)
		sendMessage(node)
	}
	fmt.Println("End of Program")
}

func listenMessage(ln net.Listener, node conHashing.Node) {
	fmt.Println("Start listening")
	// accept connection
	defer ln.Close()
	fmt.Println("Listening on :8080")
	fmt.Println("Waiting for client...")
	for {
		// get message, output
		connection, err := ln.Accept()
		if err != nil {
			fmt.Println("Error accepting: ", err.Error())
			os.Exit(1)
		}
		fmt.Println("client connected")
		go processClient(connection, node)
	}
}

func sendMessage(node conHashing.Node) {
	var id = node.ID
	var hash = conHashing.GetMD5Hash(id)
	fmt.Println(hash)
	fmt.Println(id, "Sending message")
	// fmt.Println("Sending message")
	target, msg := getNode(id, node)
	time.Sleep(time.Second * 1)
	con, err := net.Dial("tcp", target)

	if err != nil {
		fmt.Println("Error dialing: ", err.Error())
		os.Exit(2)
	}
	defer con.Close() //Requires to catch the null error when fail to connect before writing

	checkErr(err)

	_, err = con.Write([]byte(strings.Join(msg, ",")))

	checkErr(err)
}

func getNode(id string, node conHashing.Node) (string, []string) {
	switch id {
	default:
		fmt.Println("ERROR ID")
		return "null", []string{"null"}
	case "1":
		var msg = generateMessage(node)
		return "node2:8080", msg
	case "2":
		var msg = generateMessage(node)
		return "node1:8080", msg
	}
}

/**
* Returns an message generated by node
* @param node The node
*	seed node - return list of seed nodes, NodeRingPositions []
*
* @return an iterator over all the tuples stored in this DbFile.
*/
func generateMessage(node conHashing.Node) []string {
	var isSeed = node.IsSeed
	switch isSeed {
	default:
		fmt.Println("ERROR ID")
		return []string{"null"}
	case true:
		return []string{node.ID, strconv.Itoa(node.Ring.MaxID)}
	case false:
		//when node first joined, ask for ring position
		return []string{node.ID, "test data"}
	}

}

func checkErr(err error) {

	if err != nil {
		fmt.Println("CONNECTION ERROR")
		fmt.Println(err)
	}
}

func processClient(connection net.Conn, receiverNode conHashing.Node) {
	buffer := make([]byte, 1024)
	mLen, err := connection.Read(buffer)
	if err != nil {
		fmt.Println("Error reading:", err.Error())
	}
	var rcvMsg = string(buffer[:mLen])
	fmt.Println("Received: ", rcvMsg)
	if receiverNode.ID == "1" {
		// fmt.Println("processing message for node 1")
		//check if other node is a new node
		var senderNodeId = strings.Split(rcvMsg, ",")[0]
		_,ok := receiverNode.Ring.NodesMap[senderNodeId]
		if !ok {
			conHashing.UpdateSeedNode(receiverNode, senderNodeId)
		}
	} else {
		var numNodes = strings.Split(rcvMsg, ",")[1]
		conHashing.UpdateNode(receiverNode, numNodes)
	}
	connection.Close()
}
